 /*
 
 The system implements a 2-bit rotary counter on Device A. The system has two input
switches (SW1 (PF4) and SW2 (PF0)) and two output LEDs (red (PF1) and blue (PF2)
LEDs). 

- The red LED is used to display bit 0 of the counter; the blue LED is used to display bit 1
- The system starts with the counter equal to 0.
- If SW1 is pressed, the counter is incremented by 1; If SW2 is pressed, the counter is
  decremented by 1. Both SW1 and SW2 generate edge-triggered interrupts to update the
  counter. 
	
	red = 0x02
	blue = 0x04
	
	0 = 00 = red-red 
	1 = 01 = red-blue 
	2 = 10 = blue-red 
	3 = 11 = blue-blue
	
	
*/


#include <stdint.h>
#include <stdbool.h>
#include "switch_delay_interrupt_PinMux.h"
#include "inc/hw_types.h"
#include "inc/hw_memmap.h"
#include "inc/hw_gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/pin_map.h"
#include "driverlib/gpio.h"
#include "driverlib/interrupt.h"
#include "inc/tm4c123gh6pm.h"	//manually added by the programmer

#define 	SW1	     							GPIO_PIN_4			// PF4
#define 	SW2      							GPIO_PIN_0			// PF0
#define 	red_LED           	GPIO_PIN_1			// 0x02
#define 	blue_LED          	GPIO_PIN_2			// 0x04

//*****************************************************************************

signed char  c = 0;

void
PortFunctionInit(void)
{
    //
    // Enable Peripheral Clocks 
    //
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);

    //
    // Enable pin PF2 and PF1 for GPIOOutput
    //
    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_2);
		GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1);
		GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_3);

    //
    // Enable pin PF0 for GPIOInput
    //

    //
    //First open the lock and select the bits we want to modify in the GPIO commit register.
    //
    HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY;
    HWREG(GPIO_PORTF_BASE + GPIO_O_CR) = 0x1;

    //
    //Now modify the configuration of the pins that we unlocked.
    //
    GPIOPinTypeGPIOInput(GPIO_PORTF_BASE, GPIO_PIN_0);
		GPIOPinTypeGPIOInput(GPIO_PORTF_BASE, GPIO_PIN_4);
		
		//*************************************************************
		//	The code above is automatically generated by PinMux
		//  The code below should be manually added by the programmer
		//*************************************************************
		
		//Enable pull-up on PF0
		GPIO_PORTF_PUR_R |= 0x11; 
		
}

void
Interrupt_Init(void)
{
  IntEnable(INT_GPIOF);  							// enable interrupt 30 in NVIC (GPIOF)
	IntPrioritySet(INT_GPIOF, 0x00); 		// configure GPIOF interrupt priority as 0
	GPIO_PORTF_IM_R |= 0x11;   		// arm interrupt on PF0 and PF4
	GPIO_PORTF_IS_R &= ~0x11;     // PF0 and PF4 are edge-sensitive
  GPIO_PORTF_IBE_R &= ~0x11;   	// PF0 and PF4 not both edges trigger 
  GPIO_PORTF_IEV_R &= ~0x11;  	// PF0 and PF4 falling edge event
	IntMasterEnable();       		// globally enable interrupt
}

//interrupt handler
void GPIOPortF_Handler(void)
{
	
	//SW1 is pressed
	if(GPIO_PORTF_RIS_R&0x10)
	{
		// acknowledge flag for PF4
		GPIOIntClear(GPIO_PORTF_BASE, GPIO_PIN_4); 
		//counter imcremented by 1
		c++;
	}
	
	//SW2 is pressed
  if(GPIO_PORTF_RIS_R&0x01)
	{
		// acknowledge flag for PF0
		GPIOIntClear(GPIO_PORTF_BASE, GPIO_PIN_0);
		//counter imcremented by 1
		c--;
	}
		if(c > 4)
		{
      c = 0;
     }
    if(c < 0)
     {
              c = 4;
     }
}

int main(void)
{
	
		//initialize the GPIO ports	
		PortFunctionInit();
	
		//configure the GPIOF interrupt
		Interrupt_Init();
	  //
    //
    // Loop forever.
    //
	
		while(1)
		{
          switch(c)
          {
              case 1: //  00
              {
                  GPIOPinWrite(GPIO_PORTF_BASE, red_LED, 0x02);
                  GPIOPinWrite(GPIO_PORTF_BASE, blue_LED, 0x00);
									SysCtlDelay(2666667);
									GPIOPinWrite(GPIO_PORTF_BASE, red_LED, 0x00);
								  SysCtlDelay(2666667);
								                  GPIOPinWrite(GPIO_PORTF_BASE, red_LED, 0x02);
																  SysCtlDelay(2666667);
                  GPIOPinWrite(GPIO_PORTF_BASE, red_LED, 0x00);
                  GPIOPinWrite(GPIO_PORTF_BASE, blue_LED, 0x00);
								 	SysCtlDelay(10666667);

							
                  break;
              }
              case 2: // 01
              {
								                   GPIOPinWrite(GPIO_PORTF_BASE, blue_LED, 0x00);
                  GPIOPinWrite(GPIO_PORTF_BASE, red_LED, 0x02);
                  SysCtlDelay(2666667);
									GPIOPinWrite(GPIO_PORTF_BASE, red_LED, 0x00);
                  GPIOPinWrite(GPIO_PORTF_BASE, blue_LED, 0x04);
									SysCtlDelay(2666667);
                  GPIOPinWrite(GPIO_PORTF_BASE, red_LED, 0x00);
                  GPIOPinWrite(GPIO_PORTF_BASE, blue_LED, 0x00);
								 	SysCtlDelay(10666667);
                  break;
              }
              case 3: // 10
              {
									GPIOPinWrite(GPIO_PORTF_BASE, red_LED, 0x00);
                  GPIOPinWrite(GPIO_PORTF_BASE, blue_LED, 0x04);
                  SysCtlDelay(2666667);
                  GPIOPinWrite(GPIO_PORTF_BASE, red_LED, 0x02);
                  GPIOPinWrite(GPIO_PORTF_BASE, blue_LED, 0x00);
									SysCtlDelay(2666667);
                  GPIOPinWrite(GPIO_PORTF_BASE, red_LED, 0x00);
                  GPIOPinWrite(GPIO_PORTF_BASE, blue_LED, 0x00);
								 	SysCtlDelay(10666667);
                  break;
              }
              case 4: // 11
              {
                  GPIOPinWrite(GPIO_PORTF_BASE, blue_LED, 0x04);
                  GPIOPinWrite(GPIO_PORTF_BASE, red_LED, 0x00);
									SysCtlDelay(2666667);
									  GPIOPinWrite(GPIO_PORTF_BASE, blue_LED, 0x00);
								  SysCtlDelay(2666667);
								                  GPIOPinWrite(GPIO_PORTF_BASE, blue_LED, 0x04);
									SysCtlDelay(2666667);
                  GPIOPinWrite(GPIO_PORTF_BASE, red_LED, 0x00);
                  GPIOPinWrite(GPIO_PORTF_BASE, blue_LED, 0x00);
								 	SysCtlDelay(10666667);
                  break;
              }
							case 0: // off
              {
                  GPIOPinWrite(GPIO_PORTF_BASE, red_LED, 0x00);
                  GPIOPinWrite(GPIO_PORTF_BASE, blue_LED, 0x00);

                  break;
              }
    }
	}
}
