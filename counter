#include <stdint.h>
#include <stdbool.h>
#include "switch_delay_interrupt_PinMux.h"
#include "inc/hw_types.h"
#include "inc/hw_memmap.h"
#include "inc/hw_gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/pin_map.h"
#include "driverlib/gpio.h"
#include "driverlib/interrupt.h"
#include "inc/tm4c123gh6pm.h"	//manually added by the programmer

//*****************************************************************************

void
PortFunctionInit(void)
{
    //
    // Enable Peripheral Clocks 
    //
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);

    //
    // Enable pin PF2 and PF1 for GPIOOutput
    //
    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_2);
		GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1);
		GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_3);

    //
    // Enable pin PF0 for GPIOInput
    //

    //
    //First open the lock and select the bits we want to modify in the GPIO commit register.
    //
    HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY;
    HWREG(GPIO_PORTF_BASE + GPIO_O_CR) = 0x1;

    //
    //Now modify the configuration of the pins that we unlocked.
    //
    GPIOPinTypeGPIOInput(GPIO_PORTF_BASE, GPIO_PIN_0);
		GPIOPinTypeGPIOInput(GPIO_PORTF_BASE, GPIO_PIN_4);
		
		//*************************************************************
		//	The code above is automatically generated by PinMux
		//  The code below should be manually added by the programmer
		//*************************************************************
		
		//Enable pull-up on PF0
		GPIO_PORTF_PUR_R |= 0x11; 
		
}

void
Interrupt_Init(void)
{
  IntEnable(INT_GPIOF);  							// enable interrupt 30 in NVIC (GPIOF)
	IntPrioritySet(INT_GPIOF, 0x00); 		// configure GPIOF interrupt priority as 0
	GPIO_PORTF_IM_R |= 0x01;   					// arm interrupt on PF0
	GPIO_PORTF_IS_R &= ~0x01;     			// PF0 is edge-sensitive
  GPIO_PORTF_IBE_R |= 0x01;   				// PF0 both edges trigger 
	GPIO_PORTF_IM_R |= 0x10;   					// arm interrupt on PF4
	GPIO_PORTF_IS_R &= ~0x10;     			// PF4 is edge-sensitive
  GPIO_PORTF_IBE_R |= 0x10;   				// PF4 both edges trigger 
  //GPIO_PORTF_IEV_R &= ~0x01;  			// PF0 falling edge event
	IntMasterEnable();        					// globally enable interrupt
}

//interrupt handler
void GPIOPortF_Handler(void){
  GPIO_PORTF_ICR_R |= 0x10;      // acknowledge flag for PF0
	
	if(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0)==0x00)	//SW2 is pressed
	{
		while(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0)==0x00)
			{
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, 0x04);
				//GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, 0x00);
				
			}
	}
//	else
//	{
//			GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, 0x00);
//	}
	
	if(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4)==0x00)	//SW1 is pressed
	{
		while(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4)==0x00)
			{
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3, 0x08);
				//GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3, 0x00);
				
			}
	}
//	else
//	{
//			GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3, 0x00);
//	}
}

int main(void)
{
	
		//initialize the GPIO ports	
		PortFunctionInit();
	
		//configure the GPIOF interrupt
		Interrupt_Init();
	//
    //
    // Loop forever.
    //
    while(1)
    {

				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, 0x02);
				SysCtlDelay(2666667/2);	
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, 0x00);
				SysCtlDelay(2666667/2);
    }
}
